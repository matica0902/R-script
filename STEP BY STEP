#R DATASET
1.list all dataset you have install
data()

2.famous dataset
data(isis)
data(titanic)
data(Adult)
data(woman)

#R LIBRARY

#R data type
1.list 
set a null list 
aa=list() 

2.matrix
aa=matrix()

3.dataframe 
aa=data.frame()

#R LOOP control
1.FOR LOOP
p=list()
for(x in 1:5){a=x^2;print(a);p[x]=a}

2.REP
USUALLY USE WITH "NO INDEX CHANGE" FUNCTION


IF NEED USE WITH CHANGE INDEX THEN  MUST ALSO USE WITH "FOR" LOOP 

3.REP WTIH WHICH SINGLE VECTOR ====>tapply

4.REP WTIH WHICH SINGLE VECTOR or COLUMN ===>sapply
#WITH VECTOR
f <- function(x) x^2
sapply(1:10, f)
#WITH DATAFRAME

5.REP WTIH WHICH SINGLE COLUMN ====>apply

6.REP WTIH WHICH SINGLE COLUMN AND GRUOP BY IT WITH FACTOR LEVEL====>by


#While loop control
1.x<-1
while (x<10){do something}  ##caution if you dont set break condition it will go into "infinit cycle"
2.x<-1      
while (x<10){if (x == 3) break;do something}  ## IT is right to "add break" rule 



#R READ FILE

#R READ TABLE

#R FAST MAKE A DATASET METHOD
patient = 1:100
da=runif(25, .200, .400)
age = rnorm(100, mean = 60, sd = 12)
team = gl(5, 5,labels = paste("Team", LETTERS[1:5])), player = sample(letters, 25))
x <- data.frame(k1 =c(1,1,1,2,3), k2 = sample(LETTERS,5), data = 1:5)
y <- data.frame(k1 =c(1,1,1,2,3), k2 = sample(LETTERS,5), data = 1:5)
x <- data.frame(k1 = c(NA,NA,3,4,5), k2 = c(1,NA,NA,4,5), data = 1:5)

x<- data.frame(a = sample(10e6), b = sample(letters, 10e6, replace = TRUE))

x<- data.frame(id=rep(LETTERS, each=4)[1:100], replicate(100, sample(1001, 100)), Class=sample(c("Yes", "No"), 100, TRUE))

x <- read.table("http://pastebin.com/raw.php?i=m1ZJuKLH")




#delete  one column name of IP  df <- subset(df, select = -c(a,c) )
bro01<-subset(bro01,select=-IP)

#choose fix value Cart in the column name of Event

bro01<-subset(bro01, Event =="Cart")


#R APPLY GROUP
CAN USE BOTH INTO ROW OR INTO COLUMN 
data01=sample(1:10)
data02=sample(1:10)
data03=sample(1:10)
data04=data.frame(data01,data02,data03)

apply(data04,1,mean)
#TO ROW
apply(df,1,mean())
#TO COLUMN
apply(df,2,mean())


#TAPPLY
JUST APPLY IN "VECTOR" NOT IN DATAFRAME
IS THE DIFFERENT FROM "BY" 



#SAPPLY
1.SAPPLY CAN APPLY IN EACH ELEMENT TO A VECTOR 
2.SAPPLY CAN APPLY IN EACH "COLUMN"->Y DIRECTION TO A DATAFRAME 

Function	Description
sapply(vector,function(aa) fx)===>fx can direct define here
sapply(data,f)===>f must be defined first

#sapply Type 1 in vector
inp2=c(1:10)
kk= sapply(inp2, function(x) 2*x)

#sapply Type2 in vector
f <- function(x) x^2
sapply(1:10, f)

#sapply Type3 in dataframe

sapply(df,mean)

#BY
Function	Description
by("DATAFRAME","which column want group by","function(kk)" abc(target_column),data=kk)

#BY EX1---->
los=by(loo,loo$GOPPSTART, function(df) glm(GRESULT~GOBP+GOPS,family=binomial,data=df))

#BY EX2---->
data1=c("a","b","c","a","a","b","c","b","a","c")
data01=sample(1:10)
data02=sapply(data01,function(x) x*5)
data03=data.frame(data01,data02,data1)

by(data03,data03$data1, function(df) mean(df[,1]))

#BY EX3----->
by("DATAFRAME","target column group by which column","function(kk)" fun(target_column),data=kk)
#BY EX4----->
by(mm01,mm01$xyz, function(mm01) apriori(tl,parameter=list(minlen=2,support=0.1,confidence=0.5))
#BY EX5----->
by(data03,data03$data1, function(data03) mean(data03$data01))
                        ##error function(df) 

lapply is a list apply which acts on a list or vector and returns a list.
sapply is a simple lapply (function defaults to returning a vector or matrix when possible)
vapply is a verified apply (allows the return object type to be prespecified)
rapply is a recursive apply for nested lists, i.e. lists within lists
tapply is a tagged apply where the tags identify the subsets
apply is generic: applies a function to a matrix's rows or columns



#R funciton
#R STRING FUNITON
Function	Description
substr(x, start=n1, stop=n2)	Extract or replace substrings in a character vector.

#sub(old,new,string)
1.substr("abcde",7,10)

2.x <- "abcdef" 
substr(x, 2, 4) is "bcd" 
substr(x, 2, 4) <- "22222" is "a222ef"

#paste 
paste("aaa","bb","c",sep="--")
paste("x",1:3,sep="") returns c("x1","x2" "x3")
paste("x",1:3,sep="M") returns c("xM1","xM2" "xM3")
paste("Today is", date())

grep(pattern, x , ignore.case=FALSE, fixed=FALSE)	Search for pattern in x. If fixed =FALSE then pattern is a regular expression. If fixed=TRUE then pattern is a text string. Returns matching indices.
grep("A", c("b","A","c"), fixed=TRUE) returns 2
sub(pattern, replacement, x, ignore.case =FALSE, fixed=FALSE)	Find pattern in x and replace with replacement text. If fixed=FALSE then pattern is a regular expression.
If fixed = T then pattern is a text string. 
sub("\\s",".","Hello There") returns "Hello.There"

#strsplit
strsplit(x, split)	Split the elements of character vector x at split. 
strsplit("abc", "") returns 3 element vector "a","b","c"


#toupper
toupper(x)	Uppercase
tolower(x)	Lowercase


#R statics funtion

dnorm(x)	normal density function (by default m=0 sd=1)
# plot standard normal curve
x <- pretty(c(-3,3), 30)
y <- dnorm(x)
plot(x, y, type='l', xlab="Normal Deviate", ylab="Density", yaxs="i")
pnorm(q)	cumulative normal probability for q 
(area under the normal curve to the left of q)
pnorm(1.96) is 0.975
qnorm(p)	normal quantile. 
value at the p percentile of normal distribution 
qnorm(.9) is 1.28 # 90th percentile
rnorm(n, m=0,sd=1)	n random normal deviates with mean m 
and standard deviation sd. 
#50 random normal variates with mean=50, sd=10
x <- rnorm(50, m=50, sd=10)
dbinom(x, size, prob)
pbinom(q, size, prob)
qbinom(p, size, prob)
rbinom(n, size, prob)	binomial distribution where size is the sample size 
and prob is the probability of a heads (pi) 
# prob of 0 to 5 heads of fair coin out of 10 flips
dbinom(0:5, 10, .5) 
# prob of 5 or less heads of fair coin out of 10 flips
pbinom(5, 10, .5)
dpois(x, lamda)
ppois(q, lamda)
qpois(p, lamda)
rpois(n, lamda)	poisson distribution with m=std=lamda
#probability of 0,1, or 2 events with lamda=4
dpois(0:2, 4)
# probability of at least 3 events with lamda=4 
1- ppois(2,4)
dunif(x, min=0, max=1)
punif(q, min=0, max=1)
qunif(p, min=0, max=1)
runif(n, min=0, max=1)	uniform distribution, follows the same pattern 
as the normal distribution above. 
#10 uniform random variates
x <- runif(10)
#statics skill in factor df 
library(plyr)
cdata <- ddply(mm02, c("V1"), summarise,N=length(V1))
cdata[,2]

#merge
YOU CAN USEã€€"MERGE" INSTEAD OF SQL JOIN 
m01<-merge(df1,df2,by.x = "V1",by.y = "V2")
We have two dataframes  df1,df2  below 
df1   
1 1
2 1
3 2
4 2
5 3
6 3
7 3

df2
1  1
2  1
3  1
4  2
5  2
6  2
7  3
8  3
9  3
m01
1  1
2  1
3  1
4  1
5  1
6  1
7  2
8  2
9  2
10 2
11 2
12 2
13 3
14 3
15 3
16 3
17 3
18 3
19 3
20 3
21 3

#R PLOT

#R SHINNY SERVER

#R DATA CLEANNING 

#R DATA TRANSFROM

#R CONNECT DATABSE

#R MACHINE LEARNING 
#APRIORI
data <- list(
c("a","b","c"),
c("a","b"),
c("a","b","d"),
c("b","e"),
c("b","c","e"),
c("a","d","e"),
c("a","c"),
c("a","b","d"),
c("c","e"),
c("a","b","d","e")
)
data <- as(data, "transactions")

#minrule 
#inspect( subset( ru02, subset = lhs %pin% "V2=a") )------------------> causion "P"IN
#inspect( subset( ru02, subset = lhs %ain% c("V2=a","V3=b")) )--------> causion "A"IN

#inspect in S3
(data[[1]][1:3][,1]) show object first property and first three elements and first coloumn


#R MODELING

#R RHADOOP

#R IMPALA

#R SPARK

#R MLIB

#R APPLY IN TEXTMIG 

#R APPLY IN FACEBOOK


